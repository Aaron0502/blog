{"version":3,"sources":["myBlog/md lazy /^/.//.*/.md$/ groupOptions: {} namespace object","serviceWorker.ts","index.tsx","App.tsx","myBlog/RenderMd/util.tsx","myBlog/RenderMd/index.tsx","myBlog/index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","AppTEST","className","generateNav","arr","result","reduce","prev","blogSet","name","path","push","key","to","values","BLOG_SET","exact","component","hljs","require","javascript","typescript","html","registerLanguage","translateMdToHTML","MarkdownIt","highlight","str","lang","getLanguage","value","err","JSON","stringify","utils","escapeHtml","RenderMd","props","useState","blog","changeBlog","useParams","first","second","third","file","default","dangerouslySetInnerHTML","__html","Blog"],"mappings":"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","file":"static/js/main.c460fb3a.chunk.js","sourcesContent":["var map = {\n\t\"./js/test.md\": [\n\t\t125,\n\t\t3\n\t],\n\t\"./js/合集/test.md\": [\n\t\t126,\n\t\t4\n\t],\n\t\"./js/测试js.md\": [\n\t\t127,\n\t\t5\n\t],\n\t\"./js/测试js2.md\": [\n\t\t128,\n\t\t6\n\t],\n\t\"./react/测试react.md\": [\n\t\t129,\n\t\t7\n\t],\n\t\"./vue/测试vue.md\": [\n\t\t130,\n\t\t8\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 122;\nmodule.exports = webpackAsyncContext;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom'\nimport Blog from './myBlog'\nimport './App.css';\n\n// const PREFIX = process.env.PUBLIC_URL\n\nconst generateNav = function (arr: any, result = []) {\n  return arr.reduce((prev: React.ReactElement[], blogSet: any) => {\n    if (('name' in blogSet) && ('path' in blogSet)) {\n      const { name, path } = blogSet\n      prev.push(<li key={path}>\n        <Link to={`/myblog${path}`}>{name}</Link>\n      </li>)\n    } else {\n      generateNav(Object.values(blogSet)[0], result)\n    }\n    return prev\n  }, result)\n}\n\n\nfunction AppTEST() {\n  return (\n    <ul className=\"App\">\n      {\n        generateNav(BLOG_SET)\n      }\n    </ul>\n  );\n}\n\nfunction App() {\n  return <HashRouter>\n    <Switch>\n      <Route exact path='/' component={AppTEST} />\n      <Route path='/myblog'>\n        <Blog />\n      </Route>\n    </Switch>\n  </HashRouter >\n}\n\nexport default App;\n","import MarkdownIt from 'markdown-it'\n\nconst hljs = require(\"highlight.js/lib/core\");\nconst javascript = require('highlight.js/lib/languages/javascript');\nconst typescript = require('highlight.js/lib/languages/typescript')\nconst html = require('highlight.js/lib/languages/xml')\nhljs.registerLanguage('javascript', javascript);\nhljs.registerLanguage('xml', html);\nhljs.registerLanguage('typescript', typescript);\n\nconst translateMdToHTML: MarkdownIt = new MarkdownIt({\n  highlight: function (str: string, lang: string) {\n    // console.log('haha', lang, hljs.highlight)\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return `<pre><code class=\"hljs\">${hljs.highlight(lang, str, true).value}</code></pre>`\n      } catch (err) {\n        return `<pre><code class=\"hljs\">${JSON.stringify(err)}</code></pre>`\n      }\n    }\n    return '<pre ><code class=\"hljs\">' + translateMdToHTML.utils.escapeHtml(str) + '</code></pre>'\n  }\n})\n\nexport default translateMdToHTML","import React, { useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport translateMdToHTML from './util'\nimport 'highlight.js/styles/github.css';\nimport './index.scss'\n\ninterface Params {\n  first: string,\n  second: string,\n  third?: string\n}\n\nfunction RenderMd(props: Params) {\n  const [blog, changeBlog] = useState('')\n  const { first, second, third }: Params = useParams()\n\n  const path = third ? `${first}/${second}/${third}` : `${first}/${second}`\n\n  import(`../md/${path}.md`).then(file => {\n    changeBlog(file.default)\n  })\n\n  return <div className=\"myblog-mdrender\" dangerouslySetInnerHTML={{ __html: translateMdToHTML.render(blog) }}>\n  </div>\n}\n\nexport default RenderMd","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport RenderMd from './RenderMd'\n\nexport default function Blog() {\n  return <Switch>\n    <Route exact path={\"/myblog/:first/:second\"} component={RenderMd}></Route>\n    <Route path={\"/myblog/:first/:second/:third\"} component={RenderMd}></Route>\n  </Switch>\n}\n"],"sourceRoot":""}