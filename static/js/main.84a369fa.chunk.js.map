{"version":3,"sources":["myBlog/md lazy /^/.//.*/.md$/ groupOptions: {} namespace object","myBlog/index.tsx","myBlog/MdRender.tsx","App.tsx","serviceWorker.ts","index.tsx","myBlog/md lazy //.md$"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","fileMap","Blog","props","children","require","forEach","key","split","slice","category","name","replace","push","hljs","javascript","registerLanguage","md","MarkdownIt","highlight","str","lang","getLanguage","value","err","JSON","stringify","utils","escapeHtml","MdRender","useState","blog","changeBlog","params","useParams","file","default","dangerouslySetInnerHTML","__html","render","AppTEST","className","reduce","prev","fileArr","concat","fileName","to","process","App","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84a369fa.chunk.js","sourcesContent":["var map = {\n\t\"./js/test.md\": [\n\t\t24,\n\t\t0\n\t],\n\t\"./js/测试js.md\": [\n\t\t25,\n\t\t1\n\t],\n\t\"./js/测试js2.md\": [\n\t\t26,\n\t\t2\n\t],\n\t\"./react/测试react.md\": [\n\t\t27,\n\t\t3\n\t],\n\t\"./vue/测试vue.md\": [\n\t\t28,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 117;\nmodule.exports = webpackAsyncContext;","import React from 'react'\nimport { RouteComponentProps } from '@reach/router'\n\ninterface fileMap {\n  [propName: string]: string[]\n}\n\nexport const fileMap: fileMap = {}\nconst context = require.context('./md', true, /\\.md$/, 'lazy')\ncontext.keys().forEach(key => {\n  const [category, fileName] = key.split('/').slice(1)\n  const name = fileName.replace('.md', '')\n  if (fileMap[category]) {\n    fileMap[category].push(name)\n  } else {\n    fileMap[category] = [name]\n  }\n})\n\ninterface BlogProps extends RouteComponentProps {\n  children: React.ReactChild\n}\n\nexport default function Blog(props: BlogProps) {\n  return <>\n    {\n      props.children\n    }</>\n}\n","import React, { useState } from 'react'\nimport MarkdownIt from 'markdown-it'\nimport { RouteComponentProps, useParams } from '@reach/router'\nimport 'highlight.js/styles/github.css';\n\nconst hljs = require(\"highlight.js/lib/core\");\nconst javascript = require('highlight.js/lib/languages/javascript');\nhljs.registerLanguage('javascript', javascript);\n\nconst md: MarkdownIt = new MarkdownIt({\n  highlight: function (str: string, lang: string) {\n    if (lang && hljs.getLanguage(lang)) {\n      try {\n        return `<pre><code class=\"hljs\">${hljs.highlight(lang, str, true).value}</code></pre>`\n      } catch (err) {\n        return `<pre><code class=\"hljs\">${JSON.stringify(err)}</code></pre>`\n      }\n    }\n    return '<pre ><code class=\"hljs\">' + md.utils.escapeHtml(str) + '</code></pre>'\n  }\n})\n\ninterface Params {\n  category: string,\n  name: string\n}\n\nfunction MdRender(props: RouteComponentProps) {\n  const [blog, changeBlog] = useState('')\n  const params: Params = useParams()\n\n  import(`./md/${params.category}/${params.name}.md`).then(file => {\n    changeBlog(file.default)\n  })\n\n  return <div dangerouslySetInnerHTML={{ __html: md.render(blog) }}>\n  </div>\n}\n\nexport default MdRender","import React from 'react';\nimport { Link, Router, RouteComponentProps } from '@reach/router'\nimport Blog, { fileMap } from './myBlog'\nimport MdRender from './myBlog/MdRender'\nimport './App.css';\n\nconst PREFIX = process.env.PUBLIC_URL\n\nfunction AppTEST(props: RouteComponentProps) {\n  return (\n    <ul className=\"App\">\n      {\n        Object.keys(fileMap).reduce((prev: React.ReactElement[], category: string) => {\n          const fileArr: string[] = fileMap[category]\n\n          return prev.concat(fileArr.map(fileName => {\n            return <li key={fileName}>\n              <Link to={`${PREFIX}/myblog/${category}/${fileName}`}>{fileName}</Link>\n            </li>\n          }\n          ))\n        }, [])\n      }\n    </ul>\n  );\n}\n\nfunction App() {\n  return <Router>\n    <AppTEST path={`${PREFIX}/`} />\n    <Blog path={`${PREFIX}/myblog`}>\n      <MdRender path=\":category/:name\" />\n    </Blog>\n  </Router >\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\"./js/test.md\": [\n\t\t24,\n\t\t0\n\t],\n\t\"./js/测试js.md\": [\n\t\t25,\n\t\t1\n\t],\n\t\"./js/测试js2.md\": [\n\t\t26,\n\t\t2\n\t],\n\t\"./react/测试react.md\": [\n\t\t27,\n\t\t3\n\t],\n\t\"./vue/测试vue.md\": [\n\t\t28,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 40;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}